(ns List
  (defn first
    (list)
    (List/at list 0)
  )
  (defn second
    (list)
    (List/at list 1)
  )
  (defn third
    (list)
    (List/at list 2)
  )
  (defn fourth
    (list)
    (List/at list 3)
  )
  (defn last
    (list)
    (List/at list (- (List/count list) 1))
  )
  (defn count
    (list)
    (begin
      (if (= (List/at list 0) null)
        0
        (+ 1 (count (List/tail list)))
      )
    )
  )
  (defn empty?
    (list)
    (= (List/count list) 0)
  )
  (defn at
    (list idx)
    (begin
      (if (= idx 0)
        (List/head list)
        (List/at (List/tail list) (- idx 1))
      )
    )
  )
  (defn reduce
    (list func acc)
    (begin
      (if (List/empty? list)
        acc
        (reduce
          (List/tail list)
          func
          (func
            (List/head list)
            acc
          )
        )
      )
    )
  )
  (defn push
    (list item)
    (if (or (Core/null? list) (Core/null? item))
      null
      (List/concat
        (List/create item)
        list
      )
    )
  )
  (defn sum
    (list)
    (reduce list (fn (x y) (+ x y)) 0)
  )
  (defn every?
    (list pred)
    (begin
      (if (List/empty? list)
        false
        (List/reduce
          list
          (fn (acc current)
            (and
              true
              (pred acc)
            )
          )
        )
      )
    )
  )
  (defn some?
    (list pred)
    (begin
      (if (List/empty? list)
        false
        (Boolean/cast
          (List/reduce
            list
            (fn (acc current)
              (or acc (pred current))
            )
            (List/head list)
          )
        )
      )
    )
  )
  (defn map
    (list func)
    (begin
      (defn -map
        (lst f idx)
        (if (List/empty? lst)
          lst
          (List/concat
            (List/create
              (f (List/head lst) idx)
            )
            (-map
              (List/tail lst)
              f
              (+ idx 1)
            )
          )
        )
      )
      (-map list func 0)
    )
  )
  (defn each
    (list func)
    (begin
      (defn -each
        (lst f idx)
        (if (List/empty? lst)
          null
          (begin
            (f (List/head lst) idx)
            (-each
              (List/tail lst)
              f
              (+ idx 1)
            )
          )
        )
      )
      (-each list func 0)
    )
  )
)
